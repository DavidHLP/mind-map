{"layout":"logicalStructure","root":{"data":{"text":"<p>MyBatis 是否支持延迟加载?如果支持，它的实现原理是什么?</p>","expand":true,"uid":"f9d020b1-63e9-447e-a1f7-0128ffa8804f","richText":true,"isActive":false,"imgMap":{}},"children":[{"data":{"text":"<p>MyBatis 是否支持延迟加载</p>","generalization":[],"uid":"f3fc9f90-b91a-422b-8543-974ae2df9c66","richText":true,"expand":true,"isActive":false},"children":[{"data":{"text":"<p>Mybatis 支持延迟加载，也称为懒加载</p>","uid":"37b3fb1e-b111-45a9-9e55-7045ae787c13","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>请不要二级缓存（Mapper 级别缓存） ， 分布式环境下可能会出现最终不一致的问题</p>","uid":"87b97fdb-dba5-4732-b54e-8de70ec8f745","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>它的实现原理是什么</p>","expand":true,"richText":true,"isActive":false,"uid":"c353ca67-338d-424b-b51e-5e4504f09ae2"},"children":[{"data":{"text":"<p>它的实现原理是通过 Mybatis;提供的代理对象来替代主对象，当访问具体关联的屋性时，才真正触发数据库的查询，特别是在处理大数据集或者复杂对象关系时，对性能提升比较大</p>","uid":"8c39ed82-1190-4b13-b2cb-440f35412e9e","expand":true,"richText":true,"isActive":false,"note":"# 关联对象延迟加载总结\n1. **定义**：主对象加载时不立即加载关联数据，仅主动访问关联数据时才查询数据库。\n2. **适用场景**：单个关联对象（如User-Address）、关联集合（如Order-多个OrderItem）。\n3. **MyBatis XML配置要点**：\n   - 单个对象用`<association>`标签，集合用`<collection>`标签；\n   - 关键配置：`fetchType=\"lazy\"`（指定延迟加载）、`select`（关联查询SQL方法）、`column`（关联查询参数字段）。\n4. **主动访问场景（触发加载）**：\n   - 单个对象：调用getter（如`user.getAddress()`）、链式访问属性（如`user.getAddress().getCity()`）、直接访问public属性等；\n   - 关联集合：调用getter（如`order.getOrderItems()`）、集合操作（如`size()`、遍历、`isEmpty()`）等。\n5. **核心特点**：按需加载关联数据，仅在代码明确使用时触发数据库查询。"},"children":[]}]}],"smmVersion":"0.14.0-fix.1"},"theme":{"template":"classic4","config":{}},"view":{"transform":{"scaleX":1,"scaleY":1,"shear":0,"rotate":0,"translateX":-889,"translateY":-45,"originX":0,"originY":0,"a":1,"b":0,"c":0,"d":1,"e":-889,"f":-45},"state":{"scale":1,"x":-889,"y":-45,"sx":-1117,"sy":-24}}}