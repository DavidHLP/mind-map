{"layout":"logicalStructure","root":{"data":{"text":"<p>MyBatis与Hibernate有哪些不同</p>","expand":true,"uid":"3ff64216-c025-4734-a76d-37858ee5bb4b","richText":true,"isActive":false,"imgMap":{}},"children":[{"data":{"text":"<p>Hibernate</p>","generalization":[],"uid":"20fe66a8-0a7b-4ba9-8ef5-4b60d1ad2f71","richText":true,"expand":true,"isActive":false},"children":[{"data":{"text":"<p>Hibernate 是完整形态的 ORM 框架，能以纯面向对象角度操作数据库，实现对象模型与数据库关系模型映射，屏蔽不同数据库的 SQL 差异，通过自身 API 或 HQL、Criteria 接口（面向对象，复杂 SQL 也能灵活实现）完成操作，还具备一、二级缓存，提升程序可移植性。但它因自动生成 SQL，无法精细控制语句（如索引选择），且多了 SQL 转化层，性能受影响。在国外广泛使用，国内常用 MyBatis，二者无绝对好坏，只有合适与否。</p>","uid":"a171edf4-52a5-403e-98a0-6f279e09a282","expand":true,"richText":true,"isActive":false},"children":[]}]},{"data":{"text":"<p>MyBatis</p>","uid":"8e434cd3-891d-488e-a4bb-e513233523b2","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>MyBatis 是半 ORM 框架，需手动编写 SQL，这使其更灵活轻量，能针对性优化 SQL，还可动态拼接 SQL，极端情况下性能更优，但与底层数据库强绑定，更换数据库时需重写 SQL。Hibernate 无需写 SQL，适合项目简单、QPS 不高，追求快速开发的场景；MyBatis 则适合核心服务、QPS 高，需精细化定制 SQL 以追求极致性能的场景，具体选择需看实际情况。</p>","uid":"65eb0c9e-5e0c-4fa5-84e8-0d93fde4ac9d","expand":true,"richText":true,"isActive":false},"children":[]}]}],"smmVersion":"0.14.0-fix.1"},"theme":{"template":"classic4","config":{}},"view":{"transform":{"scaleX":1,"scaleY":1,"shear":0,"rotate":0,"translateX":-838,"translateY":-100,"originX":0,"originY":0,"a":1,"b":0,"c":0,"d":1,"e":-838,"f":-100},"state":{"scale":1,"x":-838,"y":-100,"sx":-838,"sy":-100}}}