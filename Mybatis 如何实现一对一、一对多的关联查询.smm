{"layout":"logicalStructure","root":{"data":{"text":"<p>Mybatis 如何实现一对一、一对多的关联查询</p>","expand":true,"uid":"84a32138-0feb-47f8-b6c0-aaad485983cc","richText":true,"isActive":false,"imgMap":{}},"children":[{"data":{"text":"<p>在 MyBatis 中，实现一对一和一对多的关联査询主要是通过 resultMap 来完成的。MyBatis 提供了两种方式来处理关联关系</p>","generalization":[],"uid":"857aff36-85b8-4e8b-ac11-61bd82b20c20","richText":true,"expand":true,"isActive":false},"children":[]},{"data":{"text":"<p>嵌套结果映射(Nested Result Mapping)</p>","uid":"35d37037-68f5-420f-8432-c601e86d4b16","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>1. 适用于一次 SQL 查询中同时返回主表和关联表的数据。</p>","uid":"9a27aec5-8d3d-4385-adad-0debf581baef","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>2. 使用&lt;association&gt;标签表示一对一的关系。</p>","uid":"1e0d23a8-1d6a-4994-a4a4-3e9edf63c44c","expand":true,"richText":true,"isActive":false,"note":"#### 1. 用`<association>`实现订单（Order）与用户（User）一对一关系\n```xml\n<resultMap id=\"orderResultMap\" type=\"Order\">\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"orderName\" property=\"orderName\"/>\n    <!-- association 表示一对一关系，这里将 User 对象映射到 Order 的 user 属性 -->\n    <association property=\"user\" javaType=\"User\">\n        <id column=\"userId\" property=\"id\"/>\n        <result column=\"username\" property=\"username\"/>\n    </association>\n</resultMap>\n\n<select id=\"getOrderWithUser\" resultMap=\"orderResultMap\">\n    SELECT o.id, o.orderName, o.userId, u.username\n    FROM Order o\n    JOIN User u ON o.userId = u.id\n    WHERE o.id = #{orderId}\n</select>\n```\n当执行`getOrderWithUser`查询时，会同时返回订单数据以及对应的用户数据，并将用户数据封装到订单对象的`user`属性中。"},"children":[]},{"data":{"text":"<p>3. 使用&lt;collection&gt;标签表示一对多的关系</p>","uid":"b20d29bb-0d19-4ea6-bb65-2861ce7a4e64","expand":true,"richText":true,"isActive":false,"note":"#### 2\\. 用`<collection>`实现用户（User）与订单（Order）一对多关系\n\n```xml\n<resultMap id=\"userResultMap\" type=\"User\">\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"username\" property=\"username\"/>\n    <!-- collection 表示一对多关系，这里将 Order 列表映射到 User 的 orders 属性 -->\n    <collection property=\"orders\" ofType=\"Order\">\n        <id column=\"orderId\" property=\"id\"/>\n        <result column=\"orderName\" property=\"orderName\"/>\n    </collection>\n</resultMap>\n\n<select id=\"getUserWithOrders\" resultMap=\"userResultMap\">\n    SELECT u.id, u.username, o.id as orderId, o.orderName\n    FROM User u\n    LEFT JOIN Order o ON u.id = o.userId\n    WHERE u.id = #{userId}\n</select>\n```\n\n当执行`getUserWithOrders`查询时，会返回用户数据以及该用户的所有订单数据，并将订单数据封装到用户对象的`orders`列表中。这样一次SQL查询就同时获取了主表（User）和关联表（Order）的数据。"},"children":[]}]},{"data":{"text":"<p>嵌套查询(Nested Select)</p>","uid":"d8072899-21b7-4fc9-9793-77fb417aa63b","expand":true,"richText":true,"isActive":false},"children":[{"data":{"text":"<p>1. 主查询只查主表数据，关联表数据通过单独的 SQL查询获取</p>","uid":"e0d2cca3-9665-4f96-b2f6-32beedc49de4","expand":true,"richText":true,"isActive":false},"children":[]},{"data":{"text":"<p>2. 使用&lt;association&gt;或&lt;collection&gt;的 select 属性指定子查询。</p>","uid":"d0dcb1be-7803-47bf-94c3-47673b5acb6d","expand":true,"richText":true,"isActive":false,"note":"#### 1\\. 用`<association>`实现订单（`Order`）与用户（`User`）一对一关系（嵌套查询）\n\n```xml\n<!-- 先定义查询用户的语句 -->\n<select id=\"getUserById\" resultType=\"User\">\n    SELECT id, username FROM User WHERE id = #{userId}\n</select>\n\n<resultMap id=\"orderResultMap\" type=\"Order\">\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"orderName\" property=\"orderName\"/>\n    <!-- 使用association的select属性指定子查询，通过订单的userId去查询用户 -->\n    <association property=\"user\" column=\"userId\" select=\"getUserById\"/>\n</resultMap>\n\n<select id=\"getOrder\" resultMap=\"orderResultMap\">\n    SELECT id, orderName, userId FROM Order WHERE id = #{orderId}\n</select>\n```\n\n当执行`getOrder`查询获取订单时，主查询只查订单表数据，然后通过`association`的`select`属性指定的`getUserById`子查询，根据订单的`userId`去查询对应的用户数据，再将用户数据封装到订单对象的`user`属性中。\n\n#### 2\\. 用`<collection>`实现用户（`User`）与订单（`Order`）一对多关系（嵌套查询）\n\n```xml\n<!-- 先定义查询订单的语句 -->\n<select id=\"getOrdersByUserId\" resultType=\"Order\">\n    SELECT id, orderName FROM Order WHERE userId = #{userId}\n</select>\n\n<resultMap id=\"userResultMap\" type=\"User\">\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"username\" property=\"username\"/>\n    <!-- 使用collection的select属性指定子查询，通过用户的id去查询该用户的所有订单 -->\n    <collection property=\"orders\" column=\"id\" select=\"getOrdersByUserId\"/>\n</resultMap>\n\n<select id=\"getUser\" resultMap=\"userResultMap\">\n    SELECT id, username FROM User WHERE id = #{userId}\n</select>\n```\n\n当执行`getUser`查询获取用户时，主查询只查用户表数据，然后通过`collection`的`select`属性指定的`getOrdersByUserId`子查询，根据用户的`id`去查询该用户的所有订单数据，再将订单数据封装到用户对象的`orders`列表中。"},"children":[]}]}],"smmVersion":"0.14.0-fix.1"},"theme":{"template":"classic4","config":{}},"view":{"transform":{"scaleX":1,"scaleY":1,"shear":0,"rotate":0,"translateX":-932,"translateY":-49,"originX":0,"originY":0,"a":1,"b":0,"c":0,"d":1,"e":-932,"f":-49},"state":{"scale":1,"x":-932,"y":-49,"sx":-932,"sy":-49}}}